# -*- mode: python; -*-

# This SConscript describes build rules for the "mongo" project.

import itertools
import os
import re
import subprocess
import sys
from buildscripts import utils

import SCons.Action

Import("env")
Import("has_option")
Import("get_option")
Import("usev8")
<<<<<<< HEAD
Import("v8suffix")
Import("enforce_glibc")
Import("darwin windows solaris linux nix")


env.SConscript(['base/SConscript',
                'db/auth/SConscript',
                'db/catalog/SConscript',
                'db/commands/SConscript',
                'db/concurrency/SConscript',
                'db/dedup/SConscript',
                'db/exec/SConscript',
                'db/fts/SConscript',
                'db/index/SConscript',
                'db/ops/SConscript',
                'db/query/SConscript',
                'db/repl/SConscript',
                'db/sorter/SConscript',
                'db/storage/heap1/SConscript',
                'db/storage/mmap_v1/SConscript',
                'db/storage/rocks/SConscript',
                'db/structure/SConscript',
                'db/structure/btree/SConscript',
                'db/SConscript',
                'installer/msi/SConscript',
                'logger/SConscript',
                'platform/SConscript',
                's/SConscript',
                'unittest/SConscript',
                'util/concurrency/SConscript',
                'util/options_parser/SConscript',
                'util/cmdline_utils/SConscript'])

def add_exe( v ):
    return "${PROGPREFIX}%s${PROGSUFFIX}" % v

# ------    SOURCE FILE SETUP -----------

env.Library('foundation',
            [ 'util/assert_util.cpp',
              'util/concurrency/mutexdebugger.cpp',
              'util/concurrency/thread_pool.cpp',
              'util/debug_util.cpp',
              'util/exception_filter_win32.cpp',
              'util/file.cpp',
              'util/log.cpp',
              'util/platform_init.cpp',
              'util/text.cpp',
              'util/time_support.cpp',
              'util/timer.cpp',
              "util/touch_pages.cpp",
              "util/util.cpp",
              "util/startup_test.cpp",
              ],
            LIBDEPS=['stacktrace',
                     '$BUILD_DIR/mongo/base/base',
                     '$BUILD_DIR/mongo/logger/logger',
                     '$BUILD_DIR/mongo/platform/platform',
                     '$BUILD_DIR/mongo/util/concurrency/thread_name',
                     '$BUILD_DIR/third_party/shim_allocator',
                     '$BUILD_DIR/third_party/shim_boost',
                     '$BUILD_DIR/third_party/shim_tz'])

env.CppUnitTest('text_test', 'util/text_test.cpp', LIBDEPS=['foundation'])
env.CppUnitTest('util/time_support_test', 'util/time_support_test.cpp', LIBDEPS=['foundation'])

env.Library('stringutils', ['util/stringutils.cpp', 'util/base64.cpp', 'util/hex.cpp'])

env.Library('md5', [
        'util/md5.cpp',
        'util/password_digest.cpp',
        ])

env.CppUnitTest( "md5_test", ["util/md5_test.cpp", "util/md5main.cpp" ],
                 LIBDEPS=["md5"] )

env.CppUnitTest( "stringutils_test", [ "util/stringutils_test.cpp" ],
                 LIBDEPS=["stringutils"] )

env.Library('bson', [
        'bson/mutable/document.cpp',
        'bson/mutable/element.cpp',
        'bson/util/bson_extract.cpp',
        'util/safe_num.cpp',
        'bson/bson_validate.cpp',
        'bson/oid.cpp',
        "bson/optime.cpp",
        'db/jsobj.cpp',
        'db/json.cpp'
        ], LIBDEPS=[
        'base/base',
        'md5',
        'stringutils',
        '$BUILD_DIR/mongo/platform/platform',
        ])

env.Library('mutable_bson_test_utils', [
        'bson/mutable/mutable_bson_test_utils.cpp'
        ], LIBDEPS=['bson'])

env.CppUnitTest('builder_test', ['bson/util/builder_test.cpp'],
                LIBDEPS=['bson'])

env.CppUnitTest('mutable_bson_test', ['bson/mutable/mutable_bson_test.cpp'],
                 LIBDEPS=['bson', 'mutable_bson_test_utils'])

env.CppUnitTest('mutable_bson_algo_test', ['bson/mutable/mutable_bson_algo_test.cpp'],
                LIBDEPS=['bson', 'mutable_bson_test_utils'])

env.CppUnitTest('safe_num_test', ['util/safe_num_test.cpp'],
                LIBDEPS=['bson'])

env.CppUnitTest('string_map_test', ['util/string_map_test.cpp'],
                LIBDEPS=['bson','foundation'])


env.CppUnitTest('bson_field_test', ['bson/bson_field_test.cpp'],
                LIBDEPS=['bson'])

env.CppUnitTest('bson_obj_test', ['bson/bson_obj_test.cpp'],
                LIBDEPS=['bson'])

env.CppUnitTest('bson_validate_test', ['bson/bson_validate_test.cpp'],
                LIBDEPS=['bson'])

env.CppUnitTest('bsonobjbuilder_test', ['bson/bsonobjbuilder_test.cpp'],
                LIBDEPS=['bson'])

env.CppUnitTest('namespacestring_test', ['db/namespace_string_test.cpp'],
                LIBDEPS=['bson'])

env.CppUnitTest('namespace_test', ['db/structure/catalog/namespace_test.cpp'],
                LIBDEPS=['foundation'])

env.CppUnitTest('index_set_test', ['db/index_set_test.cpp'],
                LIBDEPS=['bson','index_set'])

env.Library('path',
            ['db/matcher/path.cpp',
             'db/matcher/path_internal.cpp'],
            LIBDEPS=['bson',
                     '$BUILD_DIR/mongo/db/common'])

env.CppUnitTest('path_test', ['db/matcher/path_test.cpp'],
                LIBDEPS=['path'])


env.Library('expressions',
            ['db/matcher/expression.cpp',
             'db/matcher/expression_array.cpp',
             'db/matcher/expression_leaf.cpp',
             'db/matcher/expression_tree.cpp',
             'db/matcher/expression_parser.cpp',
             'db/matcher/expression_parser_tree.cpp',
             'db/matcher/expression_where_noop.cpp',
             'db/matcher/matchable.cpp',
             'db/matcher/match_details.cpp'],
            LIBDEPS=['bson',
                     'path',
                     '$BUILD_DIR/mongo/db/common',
                     '$BUILD_DIR/third_party/shim_pcrecpp'
                     ] )

env.Library('expressions_geo',
            ['db/matcher/expression_geo.cpp',
             'db/matcher/expression_parser_geo.cpp'],
            LIBDEPS=['expressions','geoquery','geoparser'] )

env.Library('expressions_text',
            ['db/matcher/expression_text.cpp',
             'db/matcher/expression_parser_text.cpp'],
            LIBDEPS=['expressions','db/fts/base'] )

env.CppUnitTest('expression_test',
                ['db/matcher/expression_test.cpp',
                 'db/matcher/expression_leaf_test.cpp',
                 'db/matcher/expression_tree_test.cpp',
                 'db/matcher/expression_array_test.cpp'],
                LIBDEPS=['expressions'] )

env.CppUnitTest('expression_geo_test',
                ['db/matcher/expression_geo_test.cpp',
                 'db/matcher/expression_parser_geo_test.cpp'],
                LIBDEPS=['expressions_geo'] )

env.CppUnitTest('expression_text_test',
                ['db/matcher/expression_parser_text_test.cpp'],
                LIBDEPS=['expressions_text'] )

env.CppUnitTest('expression_parser_test',
                ['db/matcher/expression_parser_test.cpp',
                 'db/matcher/expression_parser_array_test.cpp',
                 'db/matcher/expression_parser_tree_test.cpp',
                 'db/matcher/expression_parser_leaf_test.cpp'],
                LIBDEPS=['expressions'] )


env.CppUnitTest('bson_extract_test', ['bson/util/bson_extract_test.cpp'], LIBDEPS=['bson'])
env.CppUnitTest('bson_check_test', ['bson/util/bson_check_test.cpp'], LIBDEPS=['bson'])

env.CppUnitTest('descriptive_stats_test',
                ['util/descriptive_stats_test.cpp'],
                LIBDEPS=['foundation', 'bson']);

env.CppUnitTest('sock_test', ['util/net/sock_test.cpp'],
                LIBDEPS=['network',
                         'synchronization',
                ])

env.CppUnitTest('curop_test',
                ['db/curop_test.cpp'],
                LIBDEPS=['serveronly', 'coredb', 'coreserver'],
                NO_CRUTCH=True)

env.Library('index_names',["db/index_names.cpp"])

env.Library( 'mongohasher', [ "db/hasher.cpp" ] )

env.Library('synchronization', [ 'util/concurrency/synchronization.cpp' ])

env.Library('auth_helpers', ['client/auth_helpers.cpp'])
=======
Import("use_system_version_of_library")
>>>>>>> upstream/master

# Boost we need everywhere. 's2' is spammed in all over the place by
# db/geo unfortunately. pcre is also used many places.
env.InjectThirdPartyIncludePaths(libraries=['boost', 's2', 'pcre'])
env.InjectMongoIncludePaths()

env.SConscript(
    dirs=[
        'base',
        'bson',
        'client',
        'crypto',
        'db',
        'dbtests',
        'installer',
        'logger',
        'platform',
        'rpc',
        's',
        'scripting',
        'shell',
        'tools',
        'unittest',
        'util',
    ],
)

def get_toolchain_ver(tool):
    # By default we don't know the version of each tool, and only report what
    # command gets executed (gcc vs /opt/mongodbtoolchain/bin/gcc).
    verstr = "version unknown"
    proc = None
    if env.ToolchainIs('clang', 'gcc'):
        proc = SCons.Action._subproc(env,
            env.subst("${%s} --version" % tool),
            stdout=subprocess.PIPE,
            stderr='devnull',
            stdin='devnull',
            universal_newlines=True,
            error='raise',
            shell=True)
        verstr = proc.stdout.readline()

    elif env.ToolchainIs('msvc') and env.TargetOSIs('windows'):
        proc = SCons.Action._subproc(env,
            env.subst("${%s}" % tool),
            stdout='devnull',
            stderr=subprocess.PIPE,
            stdin='devnull',
            universal_newlines=True,
            error='raise',
            shell=True)
        verstr = proc.stderr.readline()

    # If we started a process, we should drain its stdout/stderr and wait for
    # it to end.
    if proc:
        proc.communicate()

    return env.subst('${%s}: %s' % (tool, verstr))

js_engine_ver = get_option("js-engine") if get_option("server-js") == "on" else "none"

# On windows, we need to escape the backslashes in the command-line
# so that windows paths look okay.
cmd_line = " ".join(sys.argv).encode('string-escape')
if env.TargetOSIs('windows'):
    cmd_line = cmd_line.replace('\\', r'\\')

module_list = '{ %s }' % ', '.join([ '"{0}"'.format(x) for x in env['MONGO_MODULES'] ])

# This generates a numeric representation of the version string so that
# you can easily compare versions of MongoDB without having to parse
# the version string.
#
# The rules for this are
# {major}{minor}{release}{pre/rc/final}
# If the version is pre-release and not an rc, the final number is 0
# If the version is an RC, the final number of 1 + rc number
# If the version is pre-release between RC's, the final number is 1 + rc number
# If the version is a final release, the final number is 99
#
# Examples:
# 3.1.1-123     = 3010100
# 3.1.1-rc2     = 3010103
# 3.1.1-rc2-123 = 3010103
# 3.1.1         = 3010199
#
version_parts = [ x for x in re.match(r'^(\d+)\.(\d+)\.(\d+)-?((?:(rc)(\d+))?.*)?',
    env['MONGO_VERSION']).groups() ]
version_extra = version_parts[3] if version_parts[3] else ""
if version_parts[4] == 'rc':
    version_parts[3] = int(version_parts[5]) + -50
elif version_parts[3]:
    version_parts[3] = -100
else:
    version_parts[3] = 0
version_parts = [ int(x) for x in version_parts[:4]]

versionInfo = env.Substfile(
    'util/version.cpp.in',
    SUBST_DICT=[
        ('@mongo_version@', env['MONGO_VERSION']),
        ('@mongo_version_major@', version_parts[0]),
        ('@mongo_version_minor@', version_parts[1]),
        ('@mongo_version_patch@', version_parts[2]),
        ('@mongo_version_extra@', version_parts[3]),
        ('@mongo_version_extra_str@', version_extra),
        ('@mongo_git_hash@', env['MONGO_GIT_HASH']),
        ('@buildinfo_js_engine@', js_engine_ver),
        ('@buildinfo_allocator@', GetOption('allocator')),
        ('@buildinfo_ccflags@', env['CCFLAGS']),
        ('@buildinfo_cflags@', env['CFLAGS']),
        ('@buildinfo_cxxflags@', env['CXXFLAGS']),
        ('@buildinfo_linkflags@', env['LINKFLAGS']),
        ('@buildinfo_cmdline@', ''),
        ('@buildinfo_modules@', module_list),
        ('@buildinfo_target_arch@', env['TARGET_ARCH']),
        ('@buildinfo_target_os@', env.GetTargetOSName()),
        ('@buildinfo_cc_version@', get_toolchain_ver('CC')),
        ('@buildinfo_cxx_version@', get_toolchain_ver('CXX')),
    ])

config_header_substs = (
    ('@mongo_config_byte_order@', 'MONGO_CONFIG_BYTE_ORDER'),
    ('@mongo_config_debug_build@', 'MONGO_CONFIG_DEBUG_BUILD'),
    ('@mongo_config_have___declspec_thread@', 'MONGO_CONFIG_HAVE___DECLSPEC_THREAD'),
    ('@mongo_config_have___thread@', 'MONGO_CONFIG_HAVE___THREAD'),
    ('@mongo_config_have_execinfo_backtrace@', 'MONGO_CONFIG_HAVE_EXECINFO_BACKTRACE'),
    ('@mongo_config_have_header_unistd_h@', 'MONGO_CONFIG_HAVE_HEADER_UNISTD_H'),
    ('@mongo_config_have_posix_monotonic_clock@', 'MONGO_CONFIG_HAVE_POSIX_MONOTONIC_CLOCK'),
    ('@mongo_config_have_std_is_trivially_copyable@', 'MONGO_CONFIG_HAVE_STD_IS_TRIVIALLY_COPYABLE'),
    ('@mongo_config_have_std_make_unique@', 'MONGO_CONFIG_HAVE_STD_MAKE_UNIQUE'),
    ('@mongo_config_optimized_build@', 'MONGO_CONFIG_OPTIMIZED_BUILD'),
    ('@mongo_config_ssl@', 'MONGO_CONFIG_SSL'),
    ('@mongo_config_ssl_fips@', 'MONGO_CONFIG_SSL_FIPS'),
    ('@mongo_config_use_gdbserver@', 'MONGO_CONFIG_USE_GDBSERVER'),
)

def makeConfigHeaderDefine(self, key):
    val = "// #undef {0}".format(key)
    if key in self['CONFIG_HEADER_DEFINES']:
        val = "#define {0} {1}".format(key, self['CONFIG_HEADER_DEFINES'][key])
    return val
env.AddMethod(makeConfigHeaderDefine)

configHeaderFile = env.Substfile(
    'config.h.in',
    SUBST_DICT=[(k, env.makeConfigHeaderDefine(v)) for (k, v) in config_header_substs]
)

env.Library('version',
            [
                'util/version.cpp'
            ],
            LIBDEPS=[
                'bson/bson',
                '$BUILD_DIR/mongo/base/base'
            ])

mongod = env.Program(
    target="mongod",
    source=[
        "db/db.cpp",
        "db/mongod_options_init.cpp",
    ],
    LIBDEPS=[
        "db/coredb",
        "db/conn_pool_options",
        "db/mongod_options",
        "db/mongodandmongos",
        "db/mongodwebserver",
        "db/serveronly",
        "util/ntservice",
    ],
)

<<<<<<< HEAD
env.Library('range_deleter',
            [ 'db/range_deleter.cpp',
              'db/range_deleter_mock_env.cpp',
            ],
            LIBDEPS = [
                '$BUILD_DIR/mongo/db/repl/repl_coordinator_global',
                '$BUILD_DIR/mongo/s/base', # range_arithmetic.cpp
                'base/base',
                'bson',
                'global_environment_experiment',
                'synchronization'
            ])

env.CppUnitTest('range_deleter_test',
                [ 'db/range_deleter_test.cpp' ],
                LIBDEPS = [
                    '$BUILD_DIR/mongo/db/repl/replmocks',
                    'db/common',
                    'range_deleter',
                ])

serveronlyLibdeps = ["coreshard",
                     "db/auth/authmongod",
                     "db/fts/ftsmongod",
                     "db/common",
                     "db/concurrency/lock_mgr",
                     "db/ops/update_driver",
                     "defaultversion",
                     "geoparser",
                     "geoquery",
                     "global_optime",
                     "index_key_validate",
                     "index_set",
                     'range_deleter',
                     's/metadata',
                     's/batch_write_types',
                     "db/catalog/collection_options",
                     "db/dedup/rabin_chunk",
                     "db/dedup/chunk_index",
                     "db/exec/working_set",
                     "db/exec/exec",
                     "db/query/query",
                     "db/repl/network_interface_impl",
                     "db/repl/replication_executor",
                     "db/repl/repl_coordinator_impl",
                     "db/repl/repl_coordinator_global",
                     "db/repl/repl_settings",
                     "db/repl/replication_executor",
                     'db/storage/mmap_v1/extent',
                     'db/storage/heap1/storage_heap1',
                     'db/structure/record_store',
                     'db/structure/record_store_v1',
                     'db/structure/btree/btree',
                     '$BUILD_DIR/third_party/shim_snappy']

if has_option("rocksdb" ):
    serveronlyLibdeps.append( 'db/storage/rocks/storage_rocks' )

env.Library("serveronly", serverOnlyFiles,
            LIBDEPS=serveronlyLibdeps )

env.Library("message_server_port", "util/net/message_server_port.cpp")

env.Library("signal_handlers", "util/signal_handlers.cpp",
            LIBDEPS=["stacktrace", "foundation"]
            )

# These files go into mongos and mongod only, not into the shell or any tools.
mongodAndMongosFiles = [
    "db/initialize_server_global_state.cpp",
    "db/server_extra_log_context.cpp",
    "db/dbwebserver.cpp",
    ]
env.Library("mongodandmongos", mongodAndMongosFiles,
            LIBDEPS=["message_server_port", "signal_handlers"])

env.Library("mongodwebserver",
            [
             "db/clientlistplugin.cpp",
             "db/repl/replset_web_handler.cpp",
             "db/restapi.cpp",
             "db/stats/snapshots_webplugins.cpp",
             ],
            LIBDEPS=["coredb", "mongodandmongos"])

mongodOnlyFiles = [ "db/db.cpp", "db/commands/touch.cpp", "db/mongod_options_init.cpp" ]

# ----- TARGETS ------

env.Library("gridfs", "client/gridfs.cpp")

env.Library("coreserver", coreServerFiles, LIBDEPS=["mongocommon", "scripting"])

# mongod options
env.Library("mongod_options", ["db/mongod_options.cpp"],
            LIBDEPS=['server_options',
                     'mongocommon',
                     'serveronly',
                     'coreserver',
                     'coredb',
                     '$BUILD_DIR/mongo/util/options_parser/options_parser_init'])

# main db target
mongod = env.Install(
    '#/', env.Program( "mongod", mongodOnlyFiles,
                       LIBDEPS=["coredb",
                                "coreserver",
                                "mongodandmongos",
                                "mongodwebserver",
                                "ntservice",
                                "serveronly",
                                "mongod_options",
                                ] ) )
Default( mongod )
=======
env.Default(env.Install('#/', mongod))
>>>>>>> upstream/master

# tools
rewrittenTools = [ "mongodump", "mongorestore", "mongoexport", "mongoimport", "mongostat", "mongotop", "bsondump", "mongofiles", "mongooplog" ]

# mongobridge and mongoperf
env.Install(
    '#/',
    [
        env.Program("mongoperf",
                    [
                        "client/examples/mongoperf.cpp",
                    ],
                    LIBDEPS=[
                        "db/coredb",
                        "db/serveronly",
                        "util/ntservice_mock",
                        "util/signal_handlers_synchronous",
                    ]),
    ])

# mongos
env.Install(
    '#/',
    env.Program(
        "mongos",
        [
            "s/server.cpp",
            "s/mongos_options.cpp",
            "s/mongos_options_init.cpp",
        ],
        LIBDEPS=[
            's/catalog/legacy/catalog_manager_legacy',
            's/client/sharding_connection_hook',
            's/commands/cluster_commands',
            "s/mongoscore",
            "db/coredb",
            "s/coreshard",
            "util/ntservice",
            "db/mongodandmongos",
            "db/conn_pool_options",
            '$BUILD_DIR/mongo/util/options_parser/options_parser_init',
        ]))

# --- sniffer ---
mongosniff_built = False
if env.TargetOSIs('osx') or env["_HAVEPCAP"]:
    mongosniff_built = True
    sniffEnv = env.Clone()
    sniffEnv.Append( CPPDEFINES="MONGO_EXPOSE_MACROS" )

    if not env.TargetOSIs('windows'):
        sniffEnv.Append( LIBS=[ "pcap" ] )
    else:
        sniffEnv.Append( LIBS=[ "wpcap" ] )

    sniffEnv.Install( '#/', sniffEnv.Program( "mongosniff", "tools/sniffer.cpp",
                                              LIBDEPS = [
                                                 "db/serveronly",
                                                 "db/coredb",
                                                 "util/signal_handlers_synchronous",
                                              ] ) )

# --- shell ---

if not has_option('noshell') and usev8:
    shell_core_env = env.Clone()
    if has_option("safeshell"):
        shell_core_env.Append(CPPDEFINES=["MONGO_SAFE_SHELL"])
    shell_core_env.Library("shell_core",
                source=[
                    "shell/bench.cpp",
                    "shell/clientAndShell.cpp",
                    "shell/linenoise.cpp",
                    "shell/linenoise_utf8.cpp",
                    "shell/mk_wcwidth.cpp",
                    "shell/mongo-server.cpp",
                    "shell/shell_utils.cpp",
                    "shell/shell_utils_extended.cpp",
                    "shell/shell_utils_launcher.cpp",
                    "shell/shell_options_init.cpp"
                ],
                LIBDEPS=[
                    'db/index/external_key_generator',
                    'db/catalog/index_key_validate',
                    'scripting/scripting',
                    'util/processinfo',
                    'util/signal_handlers',
                    'shell/mongojs',
                ])

    # mongo shell options
    shell_core_env.Library("shell_options", ["shell/shell_options.cpp"],
                LIBDEPS=['$BUILD_DIR/mongo/util/options_parser/options_parser_init'])

    shellEnv = env.Clone()
    if env.TargetOSIs('windows'):
       shellEnv.Append(LIBS=["winmm.lib"])

    mongo_shell = shellEnv.Program(
        "mongo",
        "shell/dbshell.cpp",
        LIBDEPS=["$BUILD_DIR/third_party/shim_pcrecpp",
                 "shell_options",
                 "shell_core",
                 "db/server_options_core",
                 "client/clientdriver",
                 "$BUILD_DIR/mongo/util/password",
                 ])

    shellEnv.Install( '#/', mongo_shell )
else:
    shellEnv = None

#  ----  INSTALL -------

# binaries

distBinaries = []

if env.TargetOSIs('windows'):
    distBinaries.extend(['mongod.pdb', 'mongos.pdb'])

def add_exe( v ):
    return "${PROGPREFIX}%s${PROGSUFFIX}" % v

def installBinary( e, name ):
    name = add_exe( name )

    if env.TargetOSIs('solaris', 'linux') and (not has_option("nostrip")):
        name = e.Command('stripped/%s' % name, name, Copy('$TARGET', '$SOURCE'))[0]
        e.AddPostAction(name, 'strip $TARGET')

    distBinaries.append(name)
    inst = e.Install( "$INSTALL_DIR/bin", name )

    if env.TargetOSIs('posix'):
        e.AddPostAction( inst, 'chmod 755 $TARGET' )

def installExternalBinary( e, name_str ):
    name = env.File("#/%s" % add_exe(name_str))
    if not name.isfile():
        env.FatalError("ERROR: external binary not found: {0}", name)

    distBinaries.append(name)
    inst = e.Install( "$INSTALL_DIR/bin", name )

    if env.TargetOSIs('posix'):
        e.AddPostAction( inst, 'chmod 755 $TARGET' )


# "--use-new-tools" adds dependencies for rewritten (Go) tools
# It is required for "dist" but optional for "install"
if has_option("use-new-tools"):
    toolsRoot = "src/mongo-tools"
    for t in rewrittenTools:
        installExternalBinary(env, "%s/%s" % (toolsRoot, t))

# legacy tools
installBinary(env, "mongoperf")
env.Alias("tools", '#/' + add_exe("mongoperf"))

env.Alias("tools", "#/" + add_exe("mongobridge"))

if mongosniff_built:
    installBinary(env, "mongosniff")
    env.Alias("tools", '#/' + add_exe("mongosniff"))

installBinary( env, "mongod" )
installBinary( env, "mongos" )

if shellEnv is not None:
    installBinary( shellEnv, "mongo" )

env.Alias( "core", [ '#/%s' % b for b in [ add_exe( "mongo" ), add_exe( "mongod" ), add_exe( "mongos" ) ] ] )

# Stage the top-level mongodb banners
distsrc = env.Dir('#distsrc')
env.Append(MODULE_BANNERS = [distsrc.File('README'),
                             distsrc.File('THIRD-PARTY-NOTICES')])

# If no module has introduced a file named LICENSE.txt, then inject the AGPL.
if sum(itertools.imap(lambda x: x.name == "LICENSE.txt", env['MODULE_BANNERS'])) == 0:
    env.Append(MODULE_BANNERS = [distsrc.File('GNU-AGPL-3.0')])

# All module banners get staged to the top level of the tarfile, so we
# need to fail if we are going to have a name collision.
module_banner_filenames = set([f.name for f in env['MODULE_BANNERS']])
if not len(module_banner_filenames) == len(env['MODULE_BANNERS']):
    # TODO: Be nice and identify conflicts in error.
    env.FatalError("ERROR: Filename conflicts exist in module banners.")

# Build a set of directories containing module banners, and use that
# to build a --transform option for each directory so that the files
# are tar'ed up to the proper location.
module_banner_dirs = set([Dir('#').rel_path(f.get_dir()) for f in env['MODULE_BANNERS']])
module_banner_transforms = ["--transform %s=$SERVER_DIST_BASENAME" % d for d in module_banner_dirs]

# Allow modules to map original file name directories to subdirectories 
# within the archive (e.g. { "src/mongo/db/modules/enterprise/docs": "snmp"})
archive_addition_transforms = []
for full_dir, archive_dir in env["ARCHIVE_ADDITION_DIR_MAP"].items():
  archive_addition_transforms.append("--transform \"%s=$SERVER_DIST_BASENAME/%s\"" %
                                     (full_dir, archive_dir))

# "dist" target is valid only when --use-new-tools is specified
# Attempts to build release artifacts without tools must fail
if has_option("use-new-tools"):
    env.Command(
        '#/${SERVER_ARCHIVE}',
        ['#buildscripts/make_archive.py'] + env["MODULE_BANNERS"] + env["ARCHIVE_ADDITIONS"] +
        distBinaries, ' '.join(['$PYTHON ${SOURCES[0]} -o $TARGET'] + archive_addition_transforms +
        module_banner_transforms + [
                '--transform ${str(Dir(BUILD_DIR))}/mongo/stripped=$SERVER_DIST_BASENAME/bin',
                '--transform ${str(Dir(BUILD_DIR))}/mongo=$SERVER_DIST_BASENAME/bin',
                '--transform ${str(Dir(BUILD_DIR))}/mongo/stripped/src/mongo-tools=$SERVER_DIST_BASENAME/bin',
                '--transform src/mongo-tools=$SERVER_DIST_BASENAME/bin',
                '${TEMPFILE(SOURCES[1:])}']))

    env.Alias("dist", source='#/${SERVER_ARCHIVE}')
else:
    def failDist(env, target, source):
        env.FatalError("ERROR: 'dist' target only valid with --use-new-tools.")
    env.Alias("dist", [], [ failDist ] )
    env.AlwaysBuild("dist")


#final alias
env.Alias( "install", "$INSTALL_DIR" )
